const db = require("../config/database");
const bcrypt = require("bcryptjs");
const { generateToken } = require("../config/jwt");
const jwt = require("jsonwebtoken");

// üîπ ƒêƒÉng k√Ω t√†i kho·∫£n
const register = (req, res) => {
    const { TenKH, SDT, Email, MatKhau } = req.body;

    if (!TenKH || !SDT || !Email || !MatKhau) {
        return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    const hashedPassword = bcrypt.hashSync(MatKhau, 10);

    db.query(
        "INSERT INTO khachhang (TenKH, SDT, Email, MatKhau) VALUES (?, ?, ?, ?)",
        [TenKH, SDT, Email, hashedPassword],
        (err, result) => {
            if (err) {
                console.error("L·ªói ƒëƒÉng k√Ω:", err);
                return res.status(500).json({ message: "L·ªói khi ƒëƒÉng k√Ω." });
            }
            res.json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
        }
    );
};

// üîπ ƒêƒÉng nh·∫≠p
const login = (req, res) => {
    const { Email, MatKhau } = req.body;

    if (!Email || !MatKhau) {
        return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u!" });
    }

    db.query(
        "SELECT MaKH, TenKH, Email, SDT, NgaySinh, MatKhau FROM khachhang WHERE Email = ?",
        [Email],
        (err, results) => {
            if (err) {
                console.error("L·ªói ƒëƒÉng nh·∫≠p:", err);
                return res.status(500).json({ message: "L·ªói server." });
            }
            if (results.length === 0) {
                return res.status(401).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
            }

            const user = results[0];
            const isMatch = bcrypt.compareSync(MatKhau, user.MatKhau);
            if (!isMatch) {
                return res.status(401).json({ message: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!" });
            }

            delete user.MatKhau;
            const token = generateToken({ MaKH: user.MaKH, Email: user.Email });

            res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", token, user });
        }
    );
};

// üîπ ƒê·ªïi m·∫≠t kh·∫©u

const changePassword = (req, res) => {
    const { oldPassword, newPassword, confirmPassword } = req.body;

    // ‚úÖ L·∫•y token t·ª´ Headers
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!" });
    }

    const token = authHeader.split(" ")[1];

    try {
        // ‚úÖ Gi·∫£i m√£ token
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const MaKH = decoded.MaKH;

        if (!oldPassword || !newPassword || !confirmPassword) {
            return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin." });
        }

        if (newPassword !== confirmPassword) {
            return res.status(400).json({ message: "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp." });
        }

        db.query("SELECT MatKhau FROM khachhang WHERE MaKH = ?", [MaKH], (err, results) => {
            if (err) {
                console.error("‚ùå L·ªói server:", err);
                return res.status(500).json({ message: "L·ªói server." });
            }

            if (results.length === 0) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n." });
            }

            const hashedPassword = results[0].MatKhau;
            const match = bcrypt.compareSync(oldPassword, hashedPassword);

            if (!match) {
                return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng." });
            }

            const newHashedPassword = bcrypt.hashSync(newPassword, 10);

            db.query("UPDATE khachhang SET MatKhau = ? WHERE MaKH = ?", [newHashedPassword, MaKH], (err) => {
                if (err) {
                    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:", err);
                    return res.status(500).json({ message: "L·ªói server." });
                }

                res.status(200).json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng." });
            });
        });
    } catch (error) {
        console.error("‚ùå L·ªói x√°c th·ª±c token:", error);
        return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
    }
};


// üîπ Export module
module.exports = {
    register,
    login,
    changePassword
};
